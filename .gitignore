/*
                          copyright turtle clan 2016, all rights reserved.
   if you see this comment that means you're either curious of how my mod works or a cunt trying to steal my code.
          idk who you are, but if you steal my code, I will find you and I will throw turtles at you.
                    @license: this code falls under the Proprietary Software License
*/

var tcm = {
   l: {
      score:       0,
      names:       [],
      leaderboard: {},
      filltext:    false,
      toggled:     true
   },
   u: {
      fonts: function() {
         return '<link href="https://fonts.googleapis.com/css?family=Pacifico" rel="stylesheet" type="text/css" />';
      },
      html: function() {
         return '<div id="tcm" style="display:block;">' +
         '   <div id="tcm-header">' +
         '      <span>Cloud's&amp; Extension</span>' +
         '      <p>copy leaderboard names, cell names and your score straight from the game! (press x to show/hide)</p>' +
         '   </div>' +
         '   <div id="tcm-main">' +
         '      <div>' +
         '         <span>leaderboard names</span>' +
         '         <div id="tcm-leaderboard"></div>' +
         '      </div>' +
         '      <div>' +
         '         <span>cell names</span>' +
         '         <div id="tcm-names"></div>' +
         '      </div>' +
         '      <div>' +
         '         <span>score</span>' +
         '         <div id="tcm-score">' +
         '            <span onclick="javascript:prompt(\'score\', \'0\')">0</span>' +
         '         </div>' +
         '      </div>' +
         '   </div>' +
         '</div>';
      },
      span: function(title, text) {
         return '<span onclick="javascript:prompt(\'' + title + '\', \'' + text + '\')">' + text + '</span>';
      }
   },
   f: {
      filltext_override: function() {
         if ( !tcm.l.filltext ) {
            tcm.l.filltext = CanvasRenderingContext2D.prototype.fillText;
         }
         CanvasRenderingContext2D.prototype.fillText = function(text, x, y, maxWidth) {
            if ( text.match(/^(1|2|3|4|5|6|7|8|9|10)\.(.+?)$/) ) {
               var v = '', s = text.split(/\.(.+)?/);
               tcm.l.leaderboard[s['0']] = s['1'];
               for ( k in tcm.l.leaderboard ) {
                  v += tcm.u.span('leaderboard name #' + k, tcm.l.leaderboard[k]);
               }
               document.getElementById('tcm-leaderboard').innerHTML = v;
            }
            else if ( text.match(/^score\:\s([0-9]+)$/i) ) {
               tcm.l.score = parseInt(text.split(/score:\s([0-9]+)?/i)['1']);
               document.getElementById('tcm-score').innerHTML = tcm.u.span('score', tcm.l.score);
            }
            else if ( text !== '' && text.length <= 15 && !(tcm.l.names.indexOf(text) > -1) && !text.match(/(leaderboard|connect|loading|starting\smass|xp\sboost|open\sshop|([0-9]{2})m\s(([0-9]{2})h\s)?([0-9]{2})s)/i) && !text.match(/^(free\scoins|\s?([0-9]+)\scoins|\s?with\soffers|collect\sin\:|hourly\scoins|come\sback\sin|to\searn\:|starter\spack|hourly\sbonus|level\s([0-9]+)|([0-9\.]+)|.([0-9\.]+)|([0-9\.]+)\%|mass\sboost|coins|skins|shop|banana|cookie|jupiter|birdie|mercury|apple|halo|neptune|black\shole|uranus|star\sball|target|galaxy|venus|breakfast|saturn|pluto|tiger|hot\sdog|heart|mouse|wolf|goldfish|piggie|blueberry|bomb|bowling|candy|frog|hamburger|nose|seal|panda|pizza|snowman|sun|baseball|basketball|bug|cloud|moo|tomato|mushroom|donuts|terrible|ghost|apple\sface|turtle|brofist|puppy|footprint|pineapple|zebra|toon|octopus|radar|eye|owl|virus|smile|army|cat|nuclear|toxic|dog|sad|facepalm|luchador|zombie|bite|crazy|hockey|brain|evil|pirate|evil\seye|halloween|monster|scarecrow|spy|fly|spider|wasp|lizard|bat|snake|fox|coyote|hunter|sumo|bear|cougar|panther|lion|crocodile|shark|mammoth|raptor|t-rex|kraken|gingerbread|santa|evil\self|cupcake|boy\skiss|girl\skiss|cupid|shuttle|astronaut|space\sdog|alien|meteor|ufo|rocket|boot|gold\spot|hat|horseshoe|lucky\sclover|leprechaun|rainbow|choco\segg|carrot|statue|rooster|rabbit|jester|earth\sday|chihuahua|cactus|sombrero|hot\spepper|chupacabra|taco|piÃƒÆ’Ã‚Â£Ãƒâ€šÃ‚Â±ata|thirteen|black\scat|raven|mask|goblin|green\sman|slime\sface|blob|invader|space\shunter)$/i) ) {
               tcm.l.names.push(text);
               document.getElementById('tcm-names').innerHTML = document.getElementById('tcm-names').innerHTML.concat(tcm.u.span('cell name', text));
            }
            tcm.l.filltext.apply(this, arguments);
         }
      },
      hotkeys: function(event) {
         if ( event.keyCode == 88 ) {
            document.getElementById('tcm').style.display = (tcm.l.toggled ? 'none' : 'block');
            tcm.l.toggled = (tcm.l.toggled ? false : true);
         }
      },
      ready: function(callback) {
         if ( document.head !== null && document.head !== undefined && document.body !== null && document.body !== undefined ) {
            callback();
         }
         else {
            window.setTimeout(function() {
               tcm.f.ready(callback);
            }, 50);
         }
      }
   }
};

tcm.f.ready(function() {
   document.getElementsByTagName('head')[0].insertAdjacentHTML('beforeend', tcm.u.fonts());
   document.getElementsByTagName('body')[0].insertAdjacentHTML('beforeend', tcm.u.html());
   window.addEventListener('keydown', tcm.f.hotkeys);
   tcm.f.filltext_override();
});
